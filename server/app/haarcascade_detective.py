import osimport cv2import timeclass HaarcascadeDetective(object):    def __init__(self):        self.cascade_classifier = cv2.CascadeClassifier()    def get_face_classifier(self):        try:            cur_path = os.path.split(os.path.realpath(__file__))[0]            self.cascade_classifier.load(                cur_path + os.path.sep + 'haarcascades' + os.path.sep + 'haarcascade_frontalface_default.xml')        except Exception as e:            print(e)        return self    def get_faces(self, img_file):        image = cv2.imread(img_file)        gray = cv2.cvtColor(image.copy(), cv2.COLOR_BGR2GRAY)        faces = self.cascade_classifier.detectMultiScale(gray, 1.2, 10)        face_list = []        path, _ = os.path.split(img_file)        for (x, y, w, h) in faces:            face_name = str(time.time())            face = image[y:y + h, x:x + w]            face_path = path + os.path.sep + face_name + ".png"            cv2.imwrite(face_path, face)            face_list.append('/face/static/face/upload/' + face_name + ".png")        return face_list